import "tfplan-functions" as plan

param max_pool_size default 10

param allowed_types default [
  "n1-standard-1",
  "n1-standard-2",
  "n1-standard-4",
  "null",
]

allGKEClusters = plan.find_resources("google_container_cluster")

GKEClustersWithInvalidNodeCount = plan.filter_attribute_greater_than_value(
                allGKEClusters, "initial_node_count", max_pool_size, false)
clusters_with_invalid_initial_node_count = 0
for GKEClustersWithInvalidNodeCount["messages"] as address, message {
  if message not contains "null" {
    print(message)
    clusters_with_invalid_initial_node_count += 1
  }
}

GKEClustersWithInvalidMachineType = plan.filter_attribute_not_in_list(allGKEClusters,
                    "node_config.0.machine_type", allowed_types, true)
clusters_with_invalid_machine_type = length(GKEClustersWithInvalidMachineType["messages"])

allGKENodePools = plan.find_resources("google_container_node_pool")

GKENodePoolsWithInvalidInitialNodeCount = plan.filter_attribute_greater_than_value(
                    allGKENodePools,"initial_node_count", max_pool_size, false)
node_pools_with_invalid_initial_node_count = 0
for GKENodePoolsWithInvalidInitialNodeCount["messages"] as address, message {
  if message not contains "null" {
    print(message)
    node_pools_with_invalid_initial_node_count += 1
  }
}

GKENodePoolsWithInvalidNodeCount = plan.filter_attribute_greater_than_value(
                        allGKENodePools, "node_count", max_pool_size, false)
node_pools_with_invalid_node_count = 0
for GKENodePoolsWithInvalidNodeCount["messages"] as address, message {
  if message not contains "null" {
    print(message)
    node_pools_with_invalid_node_count += 1
  }
}

GKENodePoolsWithInvalidMaxNodeCount = plan.filter_attribute_greater_than_value(
          allGKENodePools,"autoscaling.0.max_node_count", max_pool_size, false)
node_pools_with_invalid_max_node_count = 0
for GKENodePoolsWithInvalidMaxNodeCount["messages"] as address, message {
  if message not contains "null" {
    print(message)
    node_pools_with_invalid_max_node_count += 1
  }
}

GKENodePoolsWithInvalidMachineType = plan.filter_attribute_not_in_list(
        allGKENodePools,"node_config.0.machine_type", allowed_types, true)
node_pools_with_invalid_machine_type = length(GKENodePoolsWithInvalidMachineType["messages"])

validated = clusters_with_invalid_initial_node_count is 0 and
            clusters_with_invalid_machine_type is 0 and
            node_pools_with_invalid_initial_node_count is 0 and
            node_pools_with_invalid_node_count is 0 and
            node_pools_with_invalid_max_node_count is 0 and
            node_pools_with_invalid_machine_type is 0

main = rule {
  validated
}